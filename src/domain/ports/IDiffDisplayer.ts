/*

Defines how diffs are shown to the user (e.g.,Â displayDiff(files: DiffFilePayload[]): Promise<void>).

*/

// Defines the interface (port) for displaying differences (diffs) to the user.
// The domain requests a diff to be shown through this port.

/**
 * Represents a file to be displayed in a diff view
 */
export interface DiffFile {
  /**
   * Function to get the content of the file from the reference commit
   */
  oldContentProvider: () => Promise<string>;
  
  /**
   * Absolute path to the current version of the file
   */
  currentPath: string;
  
  /**
   * Relative path within the repository
   */
  relativePath: string;
  
  /**
   * Short version of the commit hash for display
   */
  commitHashForTitle: string;
  
  /**
   * Full commit hash for reference
   */
  commitHash: string;
}

/**
 * Represents the raw data or description of a file change, typically generated by a
 * version control system or a diffing utility. This interface serves as a Data Transfer
 * Object (DTO) to carry information about what has changed in a file (e.g., its status,
 * paths, and optionally, content snippets).
 *
 * It is distinct from `DiffFile`, which is the structure expected by the `IDiffDisplayer`
 * to actually render a diff, often requiring dynamic content fetching via providers.
 * An array of `DiffFilePayload` objects would typically be transformed into an array of
 * `DiffFile` objects before being passed to `IDiffDisplayer.displayDiff()`.
 */
export interface DiffFilePayload {
  absoluteFilePath: string;
  relativeFilePath: string;
  commitHash: string;
  originalContent?: string; // Content before changes, could be undefined for new files
  modifiedContent?: string; // Content after changes, could be undefined for deleted files
  isNew?: boolean;
  isDeleted?: boolean;
  isModified?: boolean;
  // Add other relevant diff information if needed, e.g., hunks, line numbers
} 

/**
 * Interface for displaying diffs
 * This is the "port" in the ports & adapters pattern
 */
export interface IDiffDisplayer {
  /**
   * Display diffs for a set of file changes.
   * @param diffs An array of file payloads representing the changes.
   */
  displayDiff(diffs: DiffFile[]): Promise<void>;
}
