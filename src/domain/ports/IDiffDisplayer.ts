/*

Defines how diffs are shown to the user (e.g.,Â displayDiff(files: DiffFilePayload[]): Promise<void>).

*/

/**
 * Port interface definitions for displaying differences (diffs).
 * 
 * This module declares the contracts (interfaces, types) that the Domain layer
 * uses for requesting diff displays. Implementations of these interfaces live in the
 * Infrastructure layer (e.g., using VS Code APIs).
 */

// Defines the interface (port) for displaying differences (diffs) to the user.
// The domain requests a diff to be shown through this port.

/**
 * Represents a file to be displayed in a diff view.
 * Both sides of the diff are provided by content providers.
 */
export interface DiffFile {
  /**
   * Function to get the content of the file for the left side of the diff (e.g., current step).
   */
  leftContentProvider: () => Promise<string>;

  /**
   * Function to get the content of the file for the right side of the diff (e.g., next step/solution).
   */
  rightContentProvider: () => Promise<string>;
  
  /**
   * Relative path within the repository, used for display and URI construction.
   */
  relativePath: string;
  
  /**
   * Identifier (e.g., commit hash) for the left side content, used for unique URI scheme generation.
   */
  leftCommitId: string;

  /**
   * Identifier (e.g., commit hash) for the right side content, used for unique URI scheme generation.
   */
  rightCommitId: string;

  /**
   * Short version of an identifier (e.g., commit hash) for display in the diff tab title.
   */
  titleCommitId: string;
}

/**
 * Represents the raw data or description of a file change, typically generated by a
 * version control system or a diffing utility. This interface serves as a Data Transfer
 * Object (DTO) to carry information about what has changed in a file (e.g., its status,
 * paths, and optionally, content snippets).
 *
 * It is distinct from `DiffFile`, which is the structure expected by the `IDiffDisplayer`
 * to actually render a diff, often requiring dynamic content fetching via providers.
 * An array of `DiffFilePayload` objects would typically be transformed into an array of
 * `DiffFile` objects before being passed to `IDiffDisplayer.displayDiff()`.
 */
export interface DiffFilePayload {
  absoluteFilePath: string; // This might still be useful for context, even if not directly used for diff content URIs
  relativeFilePath: string;
  commitHash: string; // The commit where the change *culminated* (e.g. nextStep.commitHash)
  originalContent?: string; // Content before changes (e.g. currentStep content)
  modifiedContent?: string; // Content after changes (e.g. nextStep content)
  isNew?: boolean;
  isDeleted?: boolean;
  isModified?: boolean;
  // Add other relevant diff information if needed, e.g., hunks, line numbers
} 

/**
 * Interface for displaying diffs
 * This is the "port" in the ports & adapters pattern
 */
export interface IDiffDisplayer {
  /**
   * Display diffs for a set of file changes.
   * @param diffs An array of file descriptions, where each file has providers for left and right content.
   */
  displayDiff(diffs: DiffFile[]): Promise<void>;
}
