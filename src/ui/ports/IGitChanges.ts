
/**
 * Represents the raw data or description of a file change, typically generated by a
 * version control system or a diffing utility. This interface serves as a Data Transfer
 * Object (DTO) to carry information about what has changed in a file (e.g., its status,
 * paths, and optionally, content snippets).
 *
 * It is distinct from `DiffFile`, which is the structure expected by the `IDiffDisplayer`
 * to actually render a diff, often requiring dynamic content fetching via providers.
 * An array of `DiffFilePayload` objects would typically be transformed into an array of
 * `DiffFile` objects before being passed to `IDiffDisplayer.displayDiff()`.
 */
export interface DiffFilePayload {
  absoluteFilePath: string; // This might still be useful for context, even if not directly used for diff content URIs
  relativeFilePath: string;
  commitHash: string; // The commit where the change *culminated* (e.g. nextStep.commitHash)
  originalContent?: string; // Content before changes (e.g. currentStep content)
  modifiedContent?: string; // Content after changes (e.g. nextStep content)
  isNew?: boolean;
  isDeleted?: boolean;
  isModified?: boolean;
} 

export interface IGitChanges {
  /**
   * Get the list of fileâ€‘level changes for a given commit.
   * @param commitHash - The commit hash to diff against its parent.
   */
  getCommitDiff(commitHash: string): Promise<DiffFilePayload[]>;
}
